; CrypticASM Standard Library
; Contains add and mult

var std_first 3
var std_second 3
var std_result 0
var std_i 0 ; general purpose variable

jmp end ; jmp program start

add:
	cmp std_second 0 add_stop ; is d zero? then stop
	add std_first 1 ; increase first and
	sub std_second 1 ; decrease second
	jmp add
add_stop:
ret

mult:
	cmp std_second 0 mult_end

	mov std_i std_first

	mult_add:
		cmp std_i 0 mult_add_end
		add std_result 1
		sub std_i 1
		jmp mult_add
	mult_add_end:

	sub std_second 1
jmp mult
mult_end:
ret

end:

out "3*3 = "
call mult
add std_result '0'
out std_result
